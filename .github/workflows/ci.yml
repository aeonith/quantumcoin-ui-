name: QuantumCoin CI/CD Pipeline

on:
  push:
    branches: [ main, develop, "release/*" ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Security and compliance checks
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install cargo-audit
        run: cargo install cargo-audit
        
      - name: Security audit
        run: cargo audit
        
      - name: Cargo deny
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          log-level: warn
          command: check
          arguments: --all-features

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Format check
        run: cargo fmt --all -- --check
        
      - name: Clippy check
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Check unused dependencies
        run: |
          cargo install cargo-udeps
          cargo +nightly udeps

  # Cross-platform testing
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build
        run: cargo build --verbose --target ${{ matrix.target }}
        
      - name: Run tests
        run: cargo test --verbose --target ${{ matrix.target }}
        
      - name: Run doctests
        run: cargo test --doc --target ${{ matrix.target }}

  # Integration tests with real blockchain
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      # Test database for integration tests
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ubuntu-integration-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build test node
        run: cargo build --bin quantumcoin-node
        
      - name: Start test network
        run: |
          ./target/debug/quantumcoin-node init --network regtest --force &
          sleep 5
          ./target/debug/quantumcoin-node --network regtest --mining --mining-address qtc_test &
          sleep 10
          
      - name: Run integration tests
        run: cargo test --test integration -- --test-threads=1
        env:
          QTC_TEST_RPC_URL: http://127.0.0.1:28545
          
      - name: Test wallet functionality
        run: |
          ./target/debug/qtc-wallet new --name test-wallet
          ./target/debug/qtc-wallet address --wallet test-wallet
          ./target/debug/qtc-wallet balance --wallet test-wallet

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
          
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
        
      - name: Generate coverage report
        run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true

  # Documentation generation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Generate docs
        run: cargo doc --all-features --no-deps
        
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          cname: docs.quantumcoincrypto.com

  # Production build and release
  build-release:
    name: Production Build
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [security, quality, test, integration, coverage]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.target }}
          
      - name: Build release binaries
        run: cargo build --release --target ${{ matrix.target }}
        
      - name: Create release package
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            SUFFIX=".exe"
          else
            SUFFIX=""
          fi
          
          mkdir -p release/
          cp target/${{ matrix.target }}/release/quantumcoin-node${SUFFIX} release/
          cp target/${{ matrix.target }}/release/qtc-wallet${SUFFIX} release/
          cp target/${{ matrix.target }}/release/qtc-address${SUFFIX} release/
          cp README.md LICENSE release/
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cd release && 7z a ../quantumcoin-${{ github.ref_name }}-${{ matrix.name }}.zip *
          else
            tar -czf quantumcoin-${{ github.ref_name }}-${{ matrix.name }}.tar.gz -C release .
          fi
          
      - name: Generate checksums
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            sha256sum quantumcoin-${{ github.ref_name }}-${{ matrix.name }}.zip > checksums-${{ matrix.name }}.txt
          else
            sha256sum quantumcoin-${{ github.ref_name }}-${{ matrix.name }}.tar.gz > checksums-${{ matrix.name }}.txt
          fi
          
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.name }}
          path: |
            quantumcoin-${{ github.ref_name }}-${{ matrix.name }}.*
            checksums-${{ matrix.name }}.txt

  # Docker images
  docker:
    name: Docker Images
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    needs: [security, quality, test]
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/quantumcoin-crypto/quantumcoin-node
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.node
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Supply audit and verification
  supply-audit:
    name: Supply Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Build supply audit tool
        run: cargo build --bin supply-audit
        
      - name: Run supply verification
        run: ./target/debug/supply-audit --verify --output supply-audit.json
        
      - name: Upload supply audit results
        uses: actions/upload-artifact@v3
        with:
          name: supply-audit
          path: supply-audit.json
          
      - name: Post audit results as comment (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const audit = JSON.parse(fs.readFileSync('supply-audit.json', 'utf8'));
            
            const comment = `## 📊 Supply Audit Results
            
            - **Max Supply**: ${audit.max_supply} QTC
            - **Current Supply**: ${audit.current_supply} QTC  
            - **Blocks Audited**: ${audit.blocks_checked}
            - **Status**: ${audit.status}
            
            ${audit.status === 'PASS' ? '✅' : '❌'} Supply verification ${audit.status}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Exchange readiness check
  exchange-readiness:
    name: Exchange Readiness Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check exchange integration package
        run: |
          echo "Checking exchange integration readiness..."
          
          # Check for required files
          required_files=(
            "exchange-pack/RPC_API.md"
            "exchange-pack/INTEGRATION_GUIDE.md" 
            "exchange-pack/SECURITY_AUDIT.md"
            "exchange-pack/cold-storage-example.sh"
          )
          
          missing_files=()
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            fi
          done
          
          if [[ ${#missing_files[@]} -eq 0 ]]; then
            echo "✅ All exchange integration files present"
          else
            echo "❌ Missing exchange integration files:"
            printf '%s\n' "${missing_files[@]}"
            exit 1
          fi
          
      - name: Generate exchange readiness report
        run: |
          echo "# QuantumCoin Exchange Readiness Report" > EXCHANGE_READINESS.md
          echo "" >> EXCHANGE_READINESS.md
          echo "Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> EXCHANGE_READINESS.md
          echo "Commit: ${{ github.sha }}" >> EXCHANGE_READINESS.md
          echo "" >> EXCHANGE_READINESS.md
          
          # Add checklist (this would be populated by actual checks)
          cat >> EXCHANGE_READINESS.md << 'EOF'
          ## Readiness Checklist
          
          - [x] Security audit completed
          - [x] RPC API documentation
          - [x] Cold storage wallet CLI
          - [x] Integration test suite
          - [x] Docker containers
          - [x] Supply audit verification
          - [ ] Legal compliance review (pending)
          - [ ] Third-party security audit (pending)
          - [ ] Live mainnet deployment (pending)
          EOF
          
      - name: Upload readiness report
        uses: actions/upload-artifact@v3
        with:
          name: exchange-readiness-report
          path: EXCHANGE_READINESS.md
