name: "CodeQL Security Scan"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Mondays at 6 AM UTC
  workflow_dispatch:  # Allow manual triggering

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      # required for all workflows
      security-events: write
      
      # required to fetch internal or private CodeQL packs
      packages: read
      
      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: rust
          build-mode: manual
        - language: javascript-typescript
          build-mode: none
          
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        config-file: .github/codeql/codeql-config.yml
        queries: +security-and-quality

    - if: matrix.build-mode == 'manual' && matrix.language == 'rust'
      name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - if: matrix.build-mode == 'manual' && matrix.language == 'rust' 
      name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - if: matrix.build-mode == 'manual' && matrix.language == 'rust'
      name: Build Rust components
      env:
        RUSTFLAGS: "-A warnings -A dead_code -A unused_imports -A unused_variables"
      run: |
        echo "üîß Building Rust components for CodeQL analysis..."
        
        # Set permissive build flags for CodeQL
        export RUSTFLAGS="-A warnings -A dead_code -A unused_imports -A unused_variables -A unused_mut"
        
        # Try comprehensive build strategies
        if cargo build --workspace --all-features --release; then
          echo "‚úÖ Workspace build successful for CodeQL"
        else
          echo "‚ö†Ô∏è Workspace build failed, using individual crate strategy..."
          
          # Build each crate individually with error tolerance
          for crate_dir in crates/*/; do
            if [ -d "$crate_dir" ]; then
              crate_name=$(basename "$crate_dir")
              echo "Building $crate_name for CodeQL analysis..."
              (cd "$crate_dir" && RUSTFLAGS="$RUSTFLAGS" cargo build --all-features --release) || {
                echo "‚ö†Ô∏è $crate_name build had issues, continuing..."
              }
            fi
          done
          
          # Build main crate
          RUSTFLAGS="$RUSTFLAGS" cargo build --all-features --release || {
            echo "‚ö†Ô∏è Main crate build had issues, continuing with CodeQL analysis..."
          }
          
          # Build backend if exists  
          if [ -d "backend" ]; then
            echo "Building backend for CodeQL analysis..."
            (cd backend && RUSTFLAGS="$RUSTFLAGS" cargo build --all-features --release) || {
              echo "‚ö†Ô∏è Backend build had issues, continuing..."
            }
          fi
        fi
        
        echo "‚úÖ Build phase completed for CodeQL analysis"

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true
        wait-for-processing: true
