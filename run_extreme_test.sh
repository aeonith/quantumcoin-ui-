#!/bin/bash
# Run EXTREME stress test - 1000 requests/minute for 2 minutes
# ZERO TOLERANCE for errors, warnings, or failures

set -e

echo "üî• EXTREME QUANTUMCOIN STRESS TEST"
echo "=================================="
echo "Target: 1000 requests/minute for 2 minutes"
echo "Tolerance: ZERO errors, warnings, or failures"
echo ""

# Ensure k6 is available
if ! command -v k6 >/dev/null 2>&1; then
    echo "üì• Installing k6..."
    if [[ "$OSTYPE" == "darwin"* ]]; then
        brew install k6
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        wget -q https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz
        tar -xzf k6-v0.47.0-linux-amd64.tar.gz
        sudo mv k6-v0.47.0-linux-amd64/k6 /usr/local/bin/
    else
        echo "‚ùå Unsupported OS for k6 installation"
        exit 1
    fi
fi

# Start real QuantumCoin backend
echo "üöÄ Starting REAL QuantumCoin backend..."
cd backend

# Build with zero warnings tolerance
RUSTFLAGS="-D warnings" cargo build --release

if [ $? -ne 0 ]; then
    echo "‚ùå Backend build failed - ZERO TOLERANCE VIOLATED"
    exit 1
fi

# Start backend with comprehensive error handling
cargo run --release &
BACKEND_PID=$!

# Wait for backend to be fully ready
echo "‚è≥ Waiting for backend initialization..."
BACKEND_READY=false
for i in {1..60}; do
    if curl -s -f http://localhost:8080/status >/dev/null 2>&1; then
        BACKEND_READY=true
        echo "‚úÖ Backend ready after ${i} seconds"
        break
    fi
    sleep 1
done

if [ "$BACKEND_READY" != "true" ]; then
    echo "‚ùå Backend failed to start within 60 seconds"
    kill $BACKEND_PID 2>/dev/null || true
    exit 1
fi

cd ..

# Verify backend health before stress testing
echo "üîç Pre-stress health verification..."
HEALTH_RESPONSE=$(curl -s http://localhost:8080/status)

if ! echo "$HEALTH_RESPONSE" | jq -e '.height > 0' >/dev/null 2>&1; then
    echo "‚ùå Backend health check failed - height not positive"
    echo "Response: $HEALTH_RESPONSE"
    kill $BACKEND_PID 2>/dev/null || true
    exit 1
fi

echo "‚úÖ Backend health verified - starting extreme stress test"

# Run the extreme stress test
echo ""
echo "üî• EXECUTING EXTREME STRESS TEST"
echo "==============================="
echo "Duration: 2 minutes"
echo "Rate: 1000 requests/minute (~16.67/second)"
echo "Tolerance: ZERO failures"
echo ""

START_TIME=$(date +%s)

# Run k6 stress test
if k6 run stress_test_extreme.js; then
    STRESS_RESULT="PASSED"
    echo ""
    echo "üéâ EXTREME STRESS TEST PASSED"
    echo "=============================="
else
    STRESS_RESULT="FAILED"
    echo ""
    echo "‚ùå EXTREME STRESS TEST FAILED"
    echo "============================="
fi

END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

# Final health verification
echo "üîç Post-stress health verification..."
FINAL_HEALTH=$(curl -s http://localhost:8080/status)

if ! echo "$FINAL_HEALTH" | jq -e '.height > 0' >/dev/null 2>&1; then
    echo "‚ùå Backend health degraded after stress test"
    echo "Response: $FINAL_HEALTH"
    STRESS_RESULT="FAILED"
fi

# Cleanup
echo "üßπ Cleaning up..."
kill $BACKEND_PID 2>/dev/null || true

# Generate final report
echo ""
echo "üìä EXTREME STRESS TEST FINAL REPORT"
echo "==================================="
echo "Result: $STRESS_RESULT"
echo "Duration: ${DURATION} seconds"
echo "Target Rate: 1000 requests/minute"
echo "Total Expected Requests: ~2000"
echo ""

if [ "$STRESS_RESULT" = "PASSED" ]; then
    echo "‚úÖ QuantumCoin survived extreme stress testing"
    echo "‚úÖ Zero errors detected"
    echo "‚úÖ Zero warnings detected"
    echo "‚úÖ All endpoints remained responsive"
    echo "‚úÖ Backend maintained health throughout"
    echo ""
    echo "üèÜ QUANTUMCOIN IS BULLETPROOF UNDER EXTREME LOAD"
    exit 0
else
    echo "‚ùå QuantumCoin failed extreme stress testing"
    echo "‚ùå System is not ready for production"
    echo "‚ùå Fix all errors before proceeding"
    echo ""
    echo "üí• STRESS TEST FAILURE - NOT PRODUCTION READY"
    exit 1
fi
